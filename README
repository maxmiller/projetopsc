Repósitorio do projeto da disciplina de Projeto de Sistemas em CHIP

6 de junho

Pessoal vamos padronizar de fazer os códigos em ingles (Nomes de classes, Métodos e Variáveis), porém os 
commits e comentários podemos fazer em portugues

7 de junho

Implementamos as seguintes instruções no formato 16 bits type(2), op(5), dest(3), src1(3), src2(3), ou 32 bits type(2), op(5), dest(3), src1(3), src2(3), Address(16) como é mostrado no livro do gajiski pg 403.

7 de junho

- Adicionando correções necessárias para compilação
- Para compilar os códigos configure as variáveis LDFLAGS e INCLUDES do Makefile de acordo com a localização das libs e includes do systemc em seu ambiente.
- Após a configuração digite "make"

9 de junho

-Intruçoes Implementadas
tipo 1 Operação de Registradores
Op(5), dest(3), src1(3), scr2(3)
Op = 0 => RF [dest] = RF[src1] + RF[src2]
Op = 1 => RF [dest] = RF[src1] x RF[src2]
Op = 2 => RF [dest] = RF[src1] and RF(src2]
Op = 3 => RF [dest] = RF[src1] + 1
Op = 4 => RF [dest] = RF[src1]

Op(5), dest(3), src1(3), scr2(3), constante(16)
Op = 5 => RF [des] = constante

tipo 2 Operação de Memória
Op(5), dest(3), src1(3), scr2(3), endereço(16)
Op = 0 => RF [dest] = endereço
Op = 1 => RF [dest] = Mem[endereço]
Op = 2 => RF [dest] = Mem[Mem[endereço]]
Op = 3 => Mem [endereço] = RF[src1]
Op = 4 => Mem [Mem[endereço]] = RF[scr1]


tipo 3 Operação de controle de fluxo
Op(5), dest(3), src1(3), scr2(3), endereço(16)
Op = 0 => PC = endereço
Op = 1 => se statusBit PC = endereço senão PC = PC + 1

tipo 4 Operação de micelania
Op = 5 => statusBit = 1 se RF[src1] > RF[src2]
Op = 6 => statusBit = 1 se RF[src1] < RF[src2]
Op = 7 => statusBit = 1 se RF[src1] == RF[src2]
Op = 8 => statusBit = 1 se RF[src1] == 0

12 de junho

Agora o repositório está mais organizado, adicionei makefiles para os arquivos, porém só devem funcionar no linux

